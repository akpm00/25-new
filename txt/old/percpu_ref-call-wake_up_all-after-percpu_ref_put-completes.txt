From: Qi Zheng <zhengqi.arch@bytedance.com>
Subject: percpu_ref: call wake_up_all() after percpu_ref_put() completes

In the percpu_ref_call_confirm_rcu(), we call the wake_up_all() before
calling percpu_ref_put(), which will cause the value of percpu_ref to be
unstable when percpu_ref_switch_to_atomic_sync() returns.

	CPU0				CPU1

percpu_ref_switch_to_atomic_sync(&ref)
--> percpu_ref_switch_to_atomic(&ref)
    --> percpu_ref_get(ref);	/* put after confirmation */
	call_rcu(&ref->data->rcu, percpu_ref_switch_to_atomic_rcu);

					percpu_ref_switch_to_atomic_rcu
					--> percpu_ref_call_confirm_rcu
					    --> data->confirm_switch = NULL;
						wake_up_all(&percpu_ref_switch_waitq);

    /* here waiting to wake up */
    wait_event(percpu_ref_switch_waitq, !ref->data->confirm_switch);
						(A)percpu_ref_put(ref);
/* The value of &ref is unstable! */
percpu_ref_is_zero(&ref)
						(B)percpu_ref_put(ref);

As shown above, assuming that the counts on each cpu add up to 0 before
calling percpu_ref_switch_to_atomic_sync(), we expect that after switching
to atomic mode, percpu_ref_is_zero() can return true.  But actually it
will return different values in the two cases of A and B, which is not
what we expected.

Maybe the original purpose of percpu_ref_switch_to_atomic_sync() is just
to ensure that the conversion to atomic mode is completed, but it should
not return with an extra reference count.

Calling wake_up_all() after percpu_ref_put() ensures that the value of
percpu_ref is stable after percpu_ref_switch_to_atomic_sync() returns.  So
just do it.

Link: https://lkml.kernel.org/r/20220407103335.36885-1-zhengqi.arch@bytedance.com
Fixes: 490c79a65708 ("percpu_ref: decouple switching to atomic mode and  killing")
Signed-off-by: Qi Zheng <zhengqi.arch@bytedance.com>
Reviewed-by: Ming Lei <ming.lei@redhat.com>
Cc: Dennis Zhou <dennis@kernel.org>
Cc: Tejun Heo <tj@kernel.org>
Cc: Christoph Lameter <cl@linux.com>
Cc: Chengming Zhou <zhouchengming@bytedance.com>
Cc: Muchun Song <songmuchun@bytedance.com>
