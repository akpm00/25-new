From: Wei Yang <richard.weiyang@gmail.com>
Subject: mm/memcg: add next_mz back to soft limit tree if not reclaimed yet

When memory reclaim failed for a maximum number of attempts and we bail
out of the reclaim loop, we forgot to put the target mem_cgroup chosen for
next reclaim back to the soft limit tree.  This prevented pages in the
mem_cgroup from being reclaimed in the future even though the mem_cgroup
exceeded its soft limit.

Let's say there are two mem_cgroup and both of them exceed the soft limit,
while the first one is more active then the second.  Since we add a
mem_cgroup to soft limit tree every 1024 event, the second one just get a
rare chance to be put on soft limit tree even it exceeds the limit.

As time goes on, the first mem_cgroup was kept close to its soft limit due
to reclaim activities, while the memory usage of the second mem_cgroup
keeps growing over the soft limit for a long time due to its relatively
rare occurrence.

This patch adds next_mz back to prevent this scenario.

Link: https://lkml.kernel.org/r/20220312071623.19050-3-richard.weiyang@gmail.com
Signed-off-by: Wei Yang <richard.weiyang@gmail.com>
Cc: Michal Hocko <mhocko@suse.com>
Cc: Roman Gushchin <roman.gushchin@linux.dev>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: Shakeel Butt <shakeelb@google.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---

 mm/memcontrol.c |    7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

--- a/mm/memcontrol.c~mm-memcg-add-next_mz-back-to-soft-limit-tree-if-not-reclaimed-yet
+++ a/mm/memcontrol.c
@@ -3453,8 +3453,13 @@ unsigned long mem_cgroup_soft_limit_recl
 			loop > MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS))
 			break;
 	} while (!nr_reclaimed);
-	if (next_mz)
+	if (next_mz) {
+		spin_lock_irq(&mctz->lock);
+		excess = soft_limit_excess(next_mz->memcg);
+		__mem_cgroup_insert_exceeded(next_mz, mctz, excess);
+		spin_unlock_irq(&mctz->lock);
 		css_put(&next_mz->memcg->css);
+	}
 	return nr_reclaimed;
 }
 
_
