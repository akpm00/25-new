From: Nadav Amit <namit@vmware.com>
Subject: Revert "mm: numa: defer TLB flush for THP migration as long as possible"

While deferring TLB flushes is a good practice, the reverted patch caused
pending TLB flushes to be checked while the page-table lock is not taken. 
As a result, in architectures with weak memory model (PPC), Linux may miss
a memory-barrier, miss the fact TLB flushes are pending, and cause (in
theory) a memory corruption.

Since the alternative of using smp_mb__after_unlock_lock() was considered
a bit open-coded, and the performance impact is expected to be small, the
previous patch is reverted.

This reverts b0943d61b8fa4201 ("mm: numa: defer TLB flush for THP
migration as long as possible").

Link: http://lkml.kernel.org/r/20170802000818.4760-4-namit@vmware.com
Signed-off-by: Nadav Amit <namit@vmware.com>
Suggested-by: Mel Gorman <mgorman@suse.de>
Acked-by: Mel Gorman <mgorman@suse.de>
Acked-by: Rik van Riel <riel@redhat.com>
Cc: Minchan Kim <minchan@kernel.org>
Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: "David S. Miller" <davem@davemloft.net>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
Cc: Hugh Dickins <hughd@google.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jeff Dike <jdike@addtoit.com>
Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
Cc: Mel Gorman <mgorman@techsingularity.net>
Cc: Nadav Amit <nadav.amit@gmail.com>
Cc: Russell King <linux@armlinux.org.uk>
Cc: Tony Luck <tony.luck@intel.com>
Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---

 mm/huge_memory.c |    7 +++++++
 mm/migrate.c     |    6 ------
 2 files changed, 7 insertions(+), 6 deletions(-)

diff -puN mm/huge_memory.c~revert-mm-numa-defer-tlb-flush-for-thp-migration-as-long-as-possible mm/huge_memory.c
--- a/mm/huge_memory.c~revert-mm-numa-defer-tlb-flush-for-thp-migration-as-long-as-possible
+++ a/mm/huge_memory.c
@@ -1496,6 +1496,13 @@ int do_huge_pmd_numa_page(struct vm_faul
 	}
 
 	/*
+	 * The page_table_lock above provides a memory barrier
+	 * with change_protection_range.
+	 */
+	if (mm_tlb_flush_pending(vma->vm_mm))
+		flush_tlb_range(vma, haddr, haddr + HPAGE_PMD_SIZE);
+
+	/*
 	 * Migrate the THP to the requested node, returns with page unlocked
 	 * and access rights restored.
 	 */
diff -puN mm/migrate.c~revert-mm-numa-defer-tlb-flush-for-thp-migration-as-long-as-possible mm/migrate.c
--- a/mm/migrate.c~revert-mm-numa-defer-tlb-flush-for-thp-migration-as-long-as-possible
+++ a/mm/migrate.c
@@ -1937,12 +1937,6 @@ int migrate_misplaced_transhuge_page(str
 		put_page(new_page);
 		goto out_fail;
 	}
-	/*
-	 * We are not sure a pending tlb flush here is for a huge page
-	 * mapping or not. Hence use the tlb range variant
-	 */
-	if (mm_tlb_flush_pending(mm))
-		flush_tlb_range(vma, mmun_start, mmun_end);
 
 	/* Prepare a page as a migration target */
 	__SetPageLocked(new_page);
_
