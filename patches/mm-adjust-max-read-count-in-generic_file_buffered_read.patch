From: Chengguang Xu <cgxu519@gmx.com>
Subject: mm: adjust max read count in generic_file_buffered_read()

When we try to truncate read count in generic_file_buffered_read(), should
deliver (sb->s_maxbytes - offset) as maximum count not sb->s_maxbytes
itself.

Userspace effects?  Jan said

: I think ->readpage() could be called for index beyond maximum file size
: supported by the filesystem leading to weird filesystem behavior due to
: overflows in internal calculations.

Link: http://lkml.kernel.org/r/20180719081726.3341-1-cgxu519@gmx.com
Signed-off-by: Chengguang Xu <cgxu519@gmx.com>
Reviewed-by: Jan Kara <jack@suse.cz>
Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
Cc: Mel Gorman <mgorman@techsingularity.net>
Cc: Jeff Layton <jlayton@redhat.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Matthew Wilcox <willy@infradead.org>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: Al Viro <viro@zeniv.linux.org.uk>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---

 mm/filemap.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/mm/filemap.c~mm-adjust-max-read-count-in-generic_file_buffered_read
+++ a/mm/filemap.c
@@ -2064,7 +2064,7 @@ static ssize_t generic_file_buffered_rea
 
 	if (unlikely(*ppos >= inode->i_sb->s_maxbytes))
 		return 0;
-	iov_iter_truncate(iter, inode->i_sb->s_maxbytes);
+	iov_iter_truncate(iter, inode->i_sb->s_maxbytes - *ppos);
 
 	index = *ppos >> PAGE_SHIFT;
 	prev_index = ra->prev_pos >> PAGE_SHIFT;
_
